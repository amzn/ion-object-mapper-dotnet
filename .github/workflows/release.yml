name: CI Release

on:
  push:
    branches:
      - release
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ] 
        dotnet: ['5.0.x']

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Unit test
        run: dotnet test Amazon.IonObjectMapper.Test

  sign:
    name: Sign package
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ] 
        dotnet: ['5.0.x']
    env:
      source-key: IonObjectMapperDLL
      
    steps:
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
        
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Create publish ready DLL
        run: dotnet publish
        
      - name: Push unsigned DLL to S3
        id: get-version
        run: |
          version=$( aws s3api put-object --bucket ${{ secrets.AWS_UNSIGNED_BUCKET }} --key ${{ env.source-key }} --body Amazon.IonObjectMapper/bin/Debug/net5.0/Amazon.IonObjectMapper.dll | jq '.VersionId' )
          echo "::set-output name=source-version::$version"
          
      - name: Trigger signing job
        id: get-job-id
        run: id=$( aws signer start-signing-job \
          --source "s3={bucketName=${{ secrets.AWS_UNSIGNED_BUCKET }},key=${{ env.source-key }},version=${{ steps.get-version.outputs.source-version }}}" \
          --destination "s3={bucketName=${{ secrets.AWS_SIGNED_BUCKET }},prefix=\"signed/\"}" \
          --profile-name $PROFILE_NAME \
          --profile-owner $PROFILE_OWNER | jq '.JobID' )
          echo "::set-output name=job-id::$id"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
        
      - name: Wait for signing job to complete
        run: |
          pip install boto3
          python .github/workflows/signing_job_waiter.py ${{ steps.get-job-id.outputs.job-id }}
      
      - name: Get signed DLL from S3
        run: |
          aws s3api get-object --bucket ${{ secrets.AWS_SIGNED_BUCKET }} --key signed/${{ steps.get-job-id.outputs.job-id }} SignedIonObjectMapper.dll
 
